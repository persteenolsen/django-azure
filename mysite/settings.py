"""
Django settings for vercel_app project.

Generated by 'django-admin startproject' using Django 5.1.11.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '1234567890'

# 19-10-2025 - loading variables for Django Secret Key + MySQL info
# Locally
#from dotenv import load_dotenv
#load_dotenv()

# Getting the secret key from env locally and from enviroment variable in production
# SECRET_KEY=os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
#DEBUG = True

# With DEBUG=False 404 errors will be directed to a default 404 template
# Not: Django will display a 404.html if you have created one :-)
DEBUG = False

# 21-10-2025 - Only for Developement
# ALLOWED_HOSTS = ['*']
ALLOWED_HOSTS = ['pso-django.azurewebsites.net']
# 21-10-2025 - For Azure
# ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [

    # 21-10-2025 - For Azure
    "whitenoise.runserver_nostatic",

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',

    # For serving static files
    'django.contrib.staticfiles',
    'example'
]

MIDDLEWARE = [
    
    # For serving all kind of static files in a correct way use Debug = False
    # This setting is neeeded for serving static files frontend and backend admin
    'whitenoise.middleware.WhiteNoiseMiddleware',

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
         
         # Added the URL for work with templates
         # Initially create the dir 'templates' at root level
         # Root level is fine because there is only one Django App in the Project
         'DIRS': [],
         #'DIRS': [BASE_DIR / 'templates'],

         # 21-10-2025 - Test for Azure
        # 'DIRS': [ os.path.join(BASE_DIR, 'templates') ],
        

        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.app'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
# Note: Django modules for using databases are not support in serverless
# environments like Vercel. You can use a database over HTTP, hosted elsewhere.

# 18-10-2025 - The SQLite works both locally and uploaded to Pythonanywhere 
'''DATABASES = {

'default': {
   'ENGINE': 'django.db.backends.sqlite3',
   'NAME': BASE_DIR / "db.sqlite3",
  }

}'''


# No Database needed for this Starter
DATABASES = { }

# 18-10-2025 - MySQL settings at Azure

'''
# 19-10-2025 - Loading the MySQL settings from .env file
# PythonAnywhere only
DB_ENGINE=os.getenv('DB_ENGINE')
DB_NAME=os.getenv('DB_NAME')
DB_USER=os.getenv('DB_USER')
DB_PASSWORD=os.getenv('DB_PASSWORD')
DB_HOST=os.getenv('DB_HOST')
DB_PORT=os.getenv('DB_PORT')

DATABASES = {
    'default': {
        'ENGINE'  : DB_ENGINE,
        'NAME'    : DB_NAME,
        'USER'    : DB_USER,
        'PASSWORD': DB_PASSWORD,
        'HOST'    : DB_HOST,
        'PORT'    : DB_PORT,
    }
} '''

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# 21-10-2025 - Testing for Azure
# STATICFILES_DIRS = (str(BASE_DIR.joinpath('static')),)

# 21-10-2025 - Works locally
STATICFILES_DIRS = (str(BASE_DIR.joinpath('assets')),)

STATIC_URL = 'static/'

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# 21-10-2025 - Testing for Azure
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# 21-10-2025 - Works locally
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
